{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","light","componentDidMount","a","fetch","then","res","json","hr","document","querySelector","mn","sc","offset","time","unixtime","setInterval","tickspeed","day","Date","hh","getHours","mm","getMinutes","ss","getSeconds","msec","getMilliseconds","hhmmssms","mmssms","ssms","style","transform","setState","hour","minute","second","msecond","toggleLight","num","size","s","length","id","className","this","undefined","pad","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+OAyGeA,G,kNArGbC,MAAQ,CAAEC,OAAO,G,EAEjBC,kB,sBAAoB,sCAAAC,EAAA,sEACFC,MACd,uDACAC,MAAK,SAACC,GACN,OAAOA,EAAIC,UAJK,OACdD,EADc,OAQN,EAGNE,EAAKC,SAASC,cAAc,OAC5BC,EAAKF,SAASC,cAAc,OAC5BE,EAAKH,SAASC,cAAc,OAE9BG,EAAS,EACTC,EAAsB,IAAfR,EAAIS,SACC,IAEhBC,YAAW,sBAAC,0CAAAb,EAAA,4DACVU,GAAUI,KAEG,KAHH,uBAIRJ,EAAS,EAJD,SAMIT,MACV,sDACAC,MAAK,SAACC,GACN,OAAOA,EAAIC,UATL,OAMRD,EANQ,OAYRQ,EAAsB,IAAfR,EAAIS,SAZH,OAeNG,EAAM,IAAIC,KAAKL,EAAOD,GACtBO,EAAKF,EAAIG,WACTC,EAAKJ,EAAIK,aACTC,EAAKN,EAAIO,aACTC,EAAOR,EAAIS,kBAIXC,EAAWR,GADXS,EAASP,GADTQ,EAAON,EAAKE,EAAO,KACE,IACI,GAI7BlB,EAAGuB,MAAMC,UAAT,kBAA2C,GAAXJ,EAAhC,QACAjB,EAAGoB,MAAMC,UAAT,kBAvCU,EAuCsBH,EAAhC,QACAjB,EAAGmB,MAAMC,UAAT,kBAxCU,EAwCsBF,EAAhC,QAEA,EAAKG,SAAS,CAAEC,KAAMd,EAAIe,OAAQb,EAAIc,OAAQZ,EAAIa,QAASX,IA/BjD,4CAFI,KAjBE,4C,EAsDpBY,YAAc,WACZ,EAAKL,SAAS,CAAEhC,OAAQ,EAAKD,MAAMC,S,kDAGjCsC,EAAKC,GAGP,IAFA,IAAIC,EAAIF,EAAM,GAEPE,EAAEC,OAASF,GAAMC,EAAI,IAAMA,EAElC,OAAOA,I,+BAIP,OACE,yBAAKE,GAAG,QAAQC,UAAWC,KAAK7C,MAAMC,MAAQ,QAAU,QACtD,yBAAK2C,UAAU,SACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,KAAKD,GAAG,QAGzB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,KAAKD,GAAG,QAGzB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,KAAKD,GAAG,cAGHG,IAAvBD,KAAK7C,MAAMqC,SACV,yBAAKO,UAAU,0CACb,6BAAMC,KAAK7C,MAAMkC,MACjB,kCACA,6BAAMW,KAAK7C,MAAMmC,QACjB,kCACA,6BAAMU,KAAK7C,MAAMoC,QACjB,kCACA,6BAAMS,KAAKE,IAAIF,KAAK7C,MAAMqC,QAAS,KAGvC,yBAAKO,UAAU,cAAcI,QAASH,KAAKP,mB,GAhGjCW,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b25727b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = { light: false };\r\n\r\n  componentDidMount = async () => {\r\n    let res = await fetch(\r\n      \"https://worldtimeapi.org/api/timezone/Europe/Vienna\"\r\n    ).then((res) => {\r\n      return res.json();\r\n    });\r\n\r\n    // for time;\r\n    const deg = 6;\r\n    // 360 / (12 * 5);\r\n\r\n    const hr = document.querySelector(\"#hr\");\r\n    const mn = document.querySelector(\"#mn\");\r\n    const sc = document.querySelector(\"#sc\");\r\n\r\n    let offset = 0;\r\n    let time = res.unixtime * 1000;\r\n    let tickspeed = 100;\r\n\r\n    setInterval(async () => {\r\n      offset += tickspeed * 1.01;\r\n\r\n      if (offset > 30000) {\r\n        offset = 0;\r\n\r\n        res = await fetch(\r\n          \"http://worldtimeapi.org/api/timezone/Europe/Vienna\"\r\n        ).then((res) => {\r\n          return res.json();\r\n        });\r\n\r\n        time = res.unixtime * 1000;\r\n      }\r\n\r\n      let day = new Date(time + offset);\r\n      let hh = day.getHours();\r\n      let mm = day.getMinutes();\r\n      let ss = day.getSeconds();\r\n      let msec = day.getMilliseconds();\r\n\r\n      let ssms = ss + msec / 1000;\r\n      let mmssms = mm + ssms / 60;\r\n      let hhmmssms = hh + mmssms / 60;\r\n\r\n      // VERY IMPORTANT STEP:\r\n\r\n      hr.style.transform = `rotateZ(${hhmmssms * 30}deg)`;\r\n      mn.style.transform = `rotateZ(${mmssms * deg}deg)`;\r\n      sc.style.transform = `rotateZ(${ssms * deg}deg)`;\r\n\r\n      this.setState({ hour: hh, minute: mm, second: ss, msecond: msec });\r\n    }, tickspeed);\r\n  };\r\n\r\n  toggleLight = () => {\r\n    this.setState({ light: !this.state.light });\r\n  };\r\n\r\n  pad(num, size) {\r\n    let s = num + \"\";\r\n\r\n    while (s.length < size) s = \"0\" + s;\r\n\r\n    return s;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"clock\" className={this.state.light ? \"light\" : \"dark\"}>\r\n        <div className=\"clock\">\r\n          <div className=\"hour\">\r\n            <div className=\"hr\" id=\"hr\"></div>\r\n          </div>\r\n\r\n          <div className=\"min\">\r\n            <div className=\"mn\" id=\"mn\"></div>\r\n          </div>\r\n\r\n          <div className=\"sec\">\r\n            <div className=\"sc\" id=\"sc\"></div>\r\n          </div>\r\n        </div>\r\n        {this.state.msecond !== undefined && (\r\n          <div className=\"d-flex justify-content-between digital\">\r\n            <div>{this.state.hour}</div>\r\n            <div>:</div>\r\n            <div>{this.state.minute}</div>\r\n            <div>:</div>\r\n            <div>{this.state.second}</div>\r\n            <div>:</div>\r\n            <div>{this.pad(this.state.msecond, 3)}</div>\r\n          </div>\r\n        )}\r\n        <div className=\"toggleClass\" onClick={this.toggleLight}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}